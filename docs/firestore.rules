rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own user profile data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Properties - users can only access their own properties
    match /properties/{propertyId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Rent records - users can only access rent for their properties
    match /rent/{rentId} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/properties/$(resource.data.propertyId)) &&
        get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.userId == request.auth.uid;
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/properties/$(request.resource.data.propertyId)) &&
        get(/databases/$(database)/documents/properties/$(request.resource.data.propertyId)).data.userId == request.auth.uid;
    }
    
    // Payments - users can only access payments for their properties
    match /payments/{paymentId} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/properties/$(resource.data.propertyId)) &&
        get(/databases/$(database)/documents/properties/$(resource.data.propertyId)).data.userId == request.auth.uid;
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/properties/$(request.resource.data.propertyId)) &&
        get(/databases/$(database)/documents/properties/$(request.resource.data.propertyId)).data.userId == request.auth.uid;
    }
  }
}
